import test from 'ava'
import { dice } from '../src/index'

test('1 - 6', t => {
  const d = dice()
  const possibilities: (boolean | number)[] = [1, 2, 3, 4, 5, 6]
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
})

test('1 - 2', t => {
  const d = dice(2)
  const possibilities: (boolean | number)[] = [1, 2]
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
})

test('true or false', t => {
  const d = dice(2)
  const possibilities: (boolean | number)[] = [true, false]
  t.true(possibilities.includes(d.roll(1)))
  t.true(possibilities.includes(d.roll(1)))
  t.true(possibilities.includes(d.roll(1)))
  t.true(possibilities.includes(d.roll(1)))
  t.true(possibilities.includes(d.roll(1)))
  t.true(possibilities.includes(d.roll(1)))
})

test('1 - 9999', t => {
  const d = dice(9999)
  const possibilities: (boolean | number)[] = []
  let i = 1
  while (i < 10000) {
    possibilities.push(i)
    i++
  }
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
  t.true(possibilities.includes(d.roll()))
})
